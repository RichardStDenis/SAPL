// Sorting theory.
// Richard St-Denis, Universite de Sherbrooke, 2022.
DEFINITIONS
  // Type definitions
  IntArray(n, valueSet) == 1..n --> valueSet;  // total function

  // Predicates
  sorted(a, p) == !(i_).(i_ : 2..size(a) => a(p(i_-1)) <= a(p(i_)));
  stablySorted(a, p) == sorted(a, p) &
                        !(i_).(i_ : 2..size(a) &
                          a(p(i_-1)) = a(p(i_)) => p(i_-1) < p(i_));
  // Functions
  sort(a, p, sorted_a) == p : perm(dom(a)) &
    sorted(a, p) & sorted_a = (p;a);

  sortStably(a, p, sorted_a) ==  p : perm(dom(a)) &
    stablySorted(a, p) & sorted_a = (p;a);

  // Properties
  // sort(a) = sort(sort(a))
  idempotent(a, b, c, p, q) == (sort(a, p, b) & sort(b, q, c)) => b = c;
  // sort(a) = a if a is already sorted
  idempotent_(a, b, p) == sorted(a, p) => a = b;

  // If "a" is immutable under sorting, then the permutation of its stable sort is
  // the identity
  immutable(a, p, sorted_a) == (sortStably(a, p, sorted_a) & a = sorted_a) =>
                               p = id(dom(a));